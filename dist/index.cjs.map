{"version":3,"file":"index.cjs","mappings":"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","sources":["webpack://treeduxjs/webpack/bootstrap","webpack://treeduxjs/webpack/runtime/define property getters","webpack://treeduxjs/webpack/runtime/hasOwnProperty shorthand","webpack://treeduxjs/webpack/runtime/make namespace object","webpack://treeduxjs/external commonjs \"@reduxjs/toolkit\"","webpack://treeduxjs/./src/Enum/DefaultActionEnum.ts","webpack://treeduxjs/./src/Utility/Objects.ts","webpack://treeduxjs/./src/Treedux.ts","webpack://treeduxjs/./src/Data/Action.ts","webpack://treeduxjs/./src/Data/StateNode.ts","webpack://treeduxjs/./src/Data/DataStore.ts","webpack://treeduxjs/./src/Data/AbstractMutator.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@reduxjs/toolkit\");","export var DefaultActionEnum;\n(function (DefaultActionEnum) {\n    DefaultActionEnum[\"BATCH\"] = \"__BATCH__\";\n    DefaultActionEnum[\"SET_BY_KEY_PATH\"] = \"__SET_BY_KEY_PATH__\";\n})(DefaultActionEnum || (DefaultActionEnum = {}));\n","export class Objects {\n    static isObject(value) {\n        return typeof value === 'object' && value !== null;\n    }\n    static setByKeyPath(keyPath, value, target) {\n        // Check if the keyPath is empty, and if so, throw an error.\n        if (keyPath.length === 0) {\n            throw new Error(\"Key path should not be empty.\");\n        }\n        // Make a copy of the keyPath array to avoid modifying the original array.\n        const path = [...keyPath];\n        // Create a deep copy of the object.\n        const newObject = this.deepCopy(target);\n        // Initialize the current object as the deep copy of the object passed to the function.\n        let currentObj = newObject;\n        // Iterate through the keys in the path.\n        while (path.length > 0) {\n            const key = path.shift();\n            // If we're at the last key in the path, set the value and exit the loop.\n            if (path.length === 0) {\n                if (value === undefined) {\n                    delete currentObj[key];\n                }\n                else {\n                    currentObj[key] = value;\n                }\n                break;\n            }\n            // If the current object doesn't have the key, create an empty object (unless we are trying to delete a key by setting it to undefined)\n            if (!currentObj[key]) {\n                if (typeof value == \"undefined\")\n                    return newObject;\n                currentObj[key] = {};\n            }\n            // Move the reference to the nested object.\n            currentObj = currentObj[key];\n        }\n        // Return the modified deep copy.\n        return newObject;\n    }\n    static deepCopy(object) {\n        // If the object is not an object or null, return it directly.\n        if (typeof object !== 'object' || object === null) {\n            return object;\n        }\n        // Initialize the result as an array if the input object is an array, otherwise as an object.\n        const result = Array.isArray(object) ? [] : {};\n        // Iterate through the keys of the input object.\n        for (const key in object) {\n            if (Object.prototype.hasOwnProperty.call(object, key)) {\n                // Recursively call deepCopy to copy the nested properties.\n                result[key] = this.deepCopy(object[key]);\n            }\n        }\n        // Return the cloned object.\n        return result;\n    }\n}\n","import { combineReducers, configureStore, createReducer } from \"@reduxjs/toolkit\";\nimport { DefaultActionEnum } from \"./Enum/DefaultActionEnum\";\nimport { Objects } from \"./Utility/Objects\";\nexport class Treedux {\n    constructor(dataStores, options) {\n        this.dataStores = dataStores;\n        options = options || {};\n        const reducerMap = {};\n        // For each data store\n        for (const key in this.dataStores) {\n            // Get the data store instance\n            const dataStore = this.dataStores[key];\n            // Set redux on the data store\n            dataStore.setTreedux(this);\n            // Add reducer the reducer maps\n            reducerMap[key] = createReducer(dataStore.getInitialState(), (builder) => {\n                Object.entries(dataStore.getReducers()).forEach(([actionType, reducer]) => builder.addCase(actionType, reducer));\n            });\n        }\n        // Combine all data store reducers to create app reducer\n        const appReducer = combineReducers(reducerMap);\n        // Define root reducer\n        const rootReducer = (state, action) => {\n            if (action.type === DefaultActionEnum.BATCH) {\n                return action.payload.reduce(rootReducer, state);\n            }\n            else if (action.type === DefaultActionEnum.SET_BY_KEY_PATH) {\n                const { keyPath, value } = action.payload;\n                return Objects.setByKeyPath(keyPath, value, state);\n            }\n            return appReducer(state, action);\n        };\n        this.storeInstance = configureStore({\n            reducer: rootReducer,\n            preloadedState: options.initialState\n        });\n    }\n    static init(dataStores, options) {\n        return new Treedux(dataStores, options);\n    }\n    get state() {\n        if (!this.storeInstance)\n            throw \"Cannot get store. Redux store has not been initialized.\";\n        const storeObj = {};\n        for (const key in this.dataStores) {\n            storeObj[key] = this.dataStores[key].state;\n        }\n        return storeObj;\n    }\n    getState() {\n        if (!this.storeInstance)\n            throw \"Cannot get state. Redux store has not been initialized.\";\n        return this.storeInstance.getState();\n    }\n    subscribe(listener) {\n        if (!this.storeInstance)\n            throw \"Cannot subscribe to store. Redux store has not been initialized.\";\n        return this.storeInstance.subscribe(listener);\n    }\n    dispatch(...actions) {\n        if (!this.storeInstance)\n            throw \"Cannot dispatch action. Redux store has not been initialized.\";\n        this.storeInstance.dispatch({\n            type: DefaultActionEnum.BATCH,\n            payload: actions.map(action => action.serialize()),\n        });\n    }\n}\n","export class Action {\n    constructor(action, treedux) {\n        this.type = action.type;\n        this.payload = action.payload;\n        this.treedux = treedux;\n    }\n    static create(action, treedux) {\n        return new Action(action, treedux);\n    }\n    dispatch() {\n        this.treedux.dispatch(this);\n    }\n    serialize() {\n        return { type: this.type, payload: this.payload };\n    }\n}\n","import { DefaultActionEnum } from \"../Enum/DefaultActionEnum\";\nimport { Objects } from \"../Utility/Objects\";\nimport { Action } from \"./Action\";\nexport class StateNode {\n    constructor(options, treedux) {\n        this.keyPath = [];\n        this.treedux = treedux;\n        this.keyPath = options.keyPath;\n        this.mutators = options.mutators;\n    }\n    static create(options, treedux) {\n        return (new StateNode(options, treedux)).createProxy();\n    }\n    get() {\n        const keys = [...this.keyPath];\n        const state = this.treedux.getState();\n        if (keys.length === 0)\n            return state;\n        let value = state;\n        while (keys.length > 0) {\n            // Get the next key\n            const key = keys.shift();\n            // If there is a value for the key, use that\n            if (Objects.isObject(value) && value[key] !== undefined) {\n                value = value[key];\n            }\n            else {\n                this.lastKnownValue = null;\n                return this.lastKnownValue;\n            }\n        }\n        this.lastKnownValue = value;\n        return this.lastKnownValue;\n    }\n    set(value) {\n        return Action.create({\n            type: DefaultActionEnum.SET_BY_KEY_PATH,\n            payload: { keyPath: this.keyPath, value: value }\n        }, this.treedux);\n    }\n    subscribe(callback) {\n        let currentValue = this.lastKnownValue;\n        return this.treedux.subscribe(() => {\n            const newValue = this.get();\n            if (JSON.stringify(newValue) === JSON.stringify(currentValue))\n                return;\n            currentValue = newValue;\n            callback(currentValue);\n        });\n    }\n    byKey(key) {\n        if (!key)\n            throw `Key must be provided to byKey method.`;\n        return StateNode.create({\n            keyPath: this.keyPath.concat([key.toString()]),\n            mutators: this.mutators\n        }, this.treedux);\n    }\n    createProxy() {\n        return new Proxy(this, {\n            get(self, property) {\n                if (typeof property !== 'string')\n                    return null;\n                const mutatorMethod = self.getMutatorMethod(property);\n                // If mutator method exists, return it\n                if (mutatorMethod)\n                    return mutatorMethod;\n                // If property is a default method, return it\n                if (typeof self[property] === 'function')\n                    return self[property].bind(self);\n                // Default to returning a new StateNode\n                return StateNode.create({\n                    keyPath: self.keyPath.concat(property),\n                    mutators: self.mutators && self.mutators[property] ? self.mutators[property] : {}\n                }, self.treedux);\n            },\n        });\n    }\n    getMutatorMethod(methodName) {\n        // If mutator method doesn't exist, return null\n        if (!this.mutators || !this.mutators.hasOwnProperty(methodName) || typeof this.mutators[methodName] !== 'function')\n            return null;\n        const mutatorCreator = this.mutators[methodName];\n        const mutator = mutatorCreator(this.treedux);\n        return mutator.getAction.bind(mutator);\n    }\n    getMutatorMethods() {\n        const mutatorCreators = this.mutators || {};\n        const mutatorMethods = {};\n        for (const methodName in mutatorCreators) {\n            mutatorMethods[methodName] = this.getMutatorMethod(methodName);\n        }\n        return mutatorMethods;\n    }\n}\n","import { StateNode } from \"./StateNode\";\nexport class DataStore {\n    constructor(key, options) {\n        this.KEY = key;\n        this.initialState = options.initialState;\n        this.mutators = options.mutators;\n    }\n    static create(key, options) {\n        return new DataStore(key, options);\n    }\n    get state() {\n        const options = { keyPath: [this.KEY], mutators: this.mutators };\n        return StateNode.create(options, this.treedux);\n    }\n    setTreedux(treedux) {\n        this.treedux = treedux;\n        return this;\n    }\n    getInitialState() {\n        return this.initialState;\n    }\n    getReducers() {\n        return this.hydrateReducersFromMutators({}, this.mutators);\n    }\n    hydrateReducersFromMutators(reducerMap, mutators) {\n        for (const key in mutators) {\n            const mutatorCreator = mutators[key];\n            if (typeof mutatorCreator === 'object') {\n                this.hydrateReducersFromMutators(reducerMap, mutatorCreator);\n            }\n            else {\n                if (reducerMap[key])\n                    throw `Cannot add reducer. Action type already registered: ${key}`;\n                const mutator = mutatorCreator(this.treedux);\n                reducerMap[mutator.getType()] = mutator.reduce;\n            }\n        }\n        return reducerMap;\n    }\n}\n","export class AbstractMutator {\n    constructor(treedux) {\n        this.treedux = treedux;\n    }\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","DefaultActionEnum","Objects","static","keyPath","target","length","Error","path","newObject","this","deepCopy","currentObj","shift","undefined","object","result","Array","isArray","Treedux","constructor","dataStores","options","reducerMap","dataStore","setTreedux","createReducer","getInitialState","builder","entries","getReducers","forEach","actionType","reducer","addCase","appReducer","combineReducers","rootReducer","state","action","type","BATCH","payload","reduce","SET_BY_KEY_PATH","setByKeyPath","storeInstance","configureStore","preloadedState","initialState","storeObj","getState","subscribe","listener","dispatch","actions","map","serialize","Action","treedux","StateNode","mutators","createProxy","keys","isObject","lastKnownValue","set","create","callback","currentValue","newValue","JSON","stringify","byKey","concat","toString","Proxy","self","property","getMutatorMethod","bind","methodName","mutator","mutatorCreator","getAction","getMutatorMethods","mutatorCreators","mutatorMethods","DataStore","KEY","hydrateReducersFromMutators","getType","AbstractMutator"],"sourceRoot":""}