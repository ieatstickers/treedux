{"version":3,"file":"index.cjs","mappings":"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","sources":["webpack://treeduxjs/webpack/bootstrap","webpack://treeduxjs/webpack/runtime/define property getters","webpack://treeduxjs/webpack/runtime/hasOwnProperty shorthand","webpack://treeduxjs/webpack/runtime/make namespace object","webpack://treeduxjs/external commonjs \"@reduxjs/toolkit\"","webpack://treeduxjs/./src/Enum/DefaultActionEnum.ts","webpack://treeduxjs/./src/Utility/Objects.ts","webpack://treeduxjs/./src/Treedux.ts","webpack://treeduxjs/./src/Data/Action.ts","webpack://treeduxjs/./src/Data/ReadOnlyStateNode.ts","webpack://treeduxjs/./src/Data/StateNode.ts","webpack://treeduxjs/./src/Data/DataStore.ts","webpack://treeduxjs/./src/Data/AbstractMutator.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@reduxjs/toolkit\");","export var DefaultActionEnum;\n(function (DefaultActionEnum) {\n    DefaultActionEnum[\"BATCH\"] = \"__BATCH__\";\n    DefaultActionEnum[\"SET_BY_KEY_PATH\"] = \"__SET_BY_KEY_PATH__\";\n    DefaultActionEnum[\"DELETE_BY_KEY_PATH\"] = \"__DELETE_BY_KEY_PATH__\";\n})(DefaultActionEnum || (DefaultActionEnum = {}));\n","export class Objects {\n    static isObject(value) {\n        return typeof value === \"object\" && value !== null;\n    }\n    static setByKeyPath(keyPath, value, target) {\n        // Make a copy of the keyPath array to avoid modifying the original array.\n        const path = [...keyPath];\n        // Create a deep copy of the object.\n        const newObject = this.deepCopy(target);\n        // Initialize the current object as the deep copy of the object passed to the function.\n        let currentObj = newObject;\n        // Iterate through the keys in the path.\n        while (path.length > 0) {\n            const key = path.shift();\n            // If we're at the last key in the path, set the value and exit the loop.\n            if (path.length === 0) {\n                if (value === undefined) {\n                    delete currentObj[key];\n                }\n                else {\n                    currentObj[key] = value;\n                }\n                break;\n            }\n            // If the current object doesn't have the key, create an empty object (unless we are trying to delete a key by setting it to undefined)\n            if (!currentObj[key]) {\n                if (typeof value == \"undefined\")\n                    return newObject;\n                currentObj[key] = {};\n            }\n            // Move the reference to the nested object.\n            currentObj = currentObj[key];\n        }\n        // Return the modified deep copy.\n        return newObject;\n    }\n    static deepCopy(object) {\n        // If the object is not an object or null, return it directly.\n        if (typeof object !== \"object\" || object === null) {\n            return object;\n        }\n        // Initialize the result as an array if the input object is an array, otherwise as an object.\n        const result = Array.isArray(object) ? [] : {};\n        // Iterate through the keys of the input object.\n        for (const key in object) {\n            if (Object.prototype.hasOwnProperty.call(object, key)) {\n                // Recursively call deepCopy to copy the nested properties.\n                result[key] = this.deepCopy(object[key]);\n            }\n        }\n        // Return the cloned object.\n        return result;\n    }\n}\n","import { combineReducers, configureStore, createReducer } from \"@reduxjs/toolkit\";\nimport { DefaultActionEnum } from \"./Enum/DefaultActionEnum\";\nimport { Objects } from \"./Utility/Objects\";\nexport class Treedux {\n    constructor(dataStores, options) {\n        this.dataStores = dataStores;\n        options = options || {};\n        const reducerMap = {};\n        // For each data store\n        for (const key in this.dataStores) {\n            // Get the data store instance\n            const dataStore = this.dataStores[key];\n            // Set redux on the data store\n            dataStore.setTreedux(this);\n            // Add reducer the reducer maps\n            reducerMap[key] = createReducer(dataStore.getInitialState(), (builder) => {\n                Object.entries(dataStore.getReducers())\n                    .forEach(([actionType, reducer]) => builder.addCase(actionType, reducer));\n            });\n        }\n        // Combine all data store reducers to create app reducer\n        const appReducer = combineReducers(reducerMap);\n        // Define root reducer\n        const rootReducer = (state, action) => {\n            if (action.type === DefaultActionEnum.BATCH) {\n                return action.payload.reduce(rootReducer, state);\n            }\n            else if (action.type === DefaultActionEnum.SET_BY_KEY_PATH) {\n                const { keyPath, value } = action.payload;\n                return Objects.setByKeyPath(keyPath, value, state);\n            }\n            else if (action.type === DefaultActionEnum.DELETE_BY_KEY_PATH) {\n                const { keyPath } = action.payload;\n                return Objects.setByKeyPath(keyPath, undefined, state);\n            }\n            return appReducer(state, action);\n        };\n        this.storeInstance = configureStore({\n            reducer: rootReducer,\n            preloadedState: options.initialState\n        });\n    }\n    static init(dataStores, options) {\n        return new Treedux(dataStores, options);\n    }\n    get state() {\n        const storeObj = {};\n        for (const key in this.dataStores) {\n            storeObj[key] = this.dataStores[key].state;\n        }\n        return storeObj;\n    }\n    getState() {\n        return this.storeInstance.getState();\n    }\n    subscribe(listener) {\n        return this.storeInstance.subscribe(listener);\n    }\n    dispatch(...actions) {\n        this.storeInstance.dispatch({\n            type: DefaultActionEnum.BATCH,\n            payload: actions.map(action => action.serialize())\n        });\n    }\n}\n","export class Action {\n    constructor(action, treedux) {\n        this.type = action.type;\n        this.payload = action.payload;\n        this.treedux = treedux;\n    }\n    static create(action, treedux) {\n        return new Action(action, treedux);\n    }\n    dispatch() {\n        this.treedux.dispatch(this);\n    }\n    serialize() {\n        return { type: this.type, payload: this.payload };\n    }\n}\n","import { Objects } from \"../Utility/Objects\";\nexport class ReadOnlyStateNode {\n    constructor(options, treedux) {\n        this.keyPath = [];\n        this.treedux = treedux;\n        this.keyPath = options.keyPath;\n    }\n    static create(options, treedux) {\n        return (new ReadOnlyStateNode(options, treedux)).createProxy();\n    }\n    get() {\n        const keys = [...this.keyPath];\n        let value = this.treedux.getState();\n        while (keys.length > 0) {\n            // Get the next key\n            const key = keys.shift();\n            // If there is a value for the key, use that\n            if (Objects.isObject(value)) {\n                value = value[key];\n            }\n            else {\n                this.lastKnownValue = undefined;\n                return this.lastKnownValue;\n            }\n        }\n        this.lastKnownValue = value;\n        return this.lastKnownValue;\n    }\n    subscribe(callback) {\n        let currentValue = this.lastKnownValue;\n        return this.treedux.subscribe(() => {\n            const newValue = this.get();\n            if (JSON.stringify(newValue) === JSON.stringify(currentValue))\n                return;\n            currentValue = newValue;\n            callback(currentValue);\n        });\n    }\n    byKey(key) {\n        if (!key)\n            throw `Key must be provided to byKey method.`;\n        return ReadOnlyStateNode.create({\n            keyPath: this.keyPath.concat([key.toString()])\n        }, this.treedux);\n    }\n    createProxy() {\n        return new Proxy(this, {\n            get(self, property) {\n                if (typeof property !== \"string\")\n                    return null;\n                // If property is a default method, return it\n                if (typeof self[property] === \"function\")\n                    return self[property].bind(self);\n                // Default to returning a new StateNode\n                return ReadOnlyStateNode.create({\n                    keyPath: self.keyPath.concat(property)\n                }, self.treedux);\n            }\n        });\n    }\n}\n","import { DefaultActionEnum } from \"../Enum/DefaultActionEnum\";\nimport { Objects } from \"../Utility/Objects\";\nimport { Action } from \"./Action\";\nimport { ReadOnlyStateNode } from \"./ReadOnlyStateNode\";\nexport class StateNode {\n    constructor(options, treedux) {\n        this.keyPath = [];\n        this.treedux = treedux;\n        this.keyPath = options.keyPath;\n        this.mutators = options.mutators;\n    }\n    static create(options, treedux) {\n        return (new StateNode(options, treedux)).createProxy();\n    }\n    get() {\n        const keys = [...this.keyPath];\n        let value = this.treedux.getState();\n        while (keys.length > 0) {\n            // Get the next key\n            const key = keys.shift();\n            // If there is a value for the key, use that\n            if (Objects.isObject(value) && value[key] !== undefined) {\n                value = value[key];\n            }\n            else {\n                this.lastKnownValue = undefined;\n                return this.lastKnownValue;\n            }\n        }\n        this.lastKnownValue = value;\n        return this.lastKnownValue;\n    }\n    set(value) {\n        return Action.create({\n            type: DefaultActionEnum.SET_BY_KEY_PATH,\n            payload: { keyPath: this.keyPath, value: value }\n        }, this.treedux);\n    }\n    subscribe(callback) {\n        let currentValue = this.lastKnownValue;\n        return this.treedux.subscribe(() => {\n            const newValue = this.get();\n            if (JSON.stringify(newValue) === JSON.stringify(currentValue))\n                return;\n            currentValue = newValue;\n            callback(currentValue);\n        });\n    }\n    byKey(key) {\n        if (!key)\n            throw `Key must be provided to byKey method.`;\n        return StateNode.create({\n            keyPath: this.keyPath.concat([key.toString()]),\n            mutators: this.mutators\n        }, this.treedux);\n    }\n    delete() {\n        return Action.create({\n            type: DefaultActionEnum.DELETE_BY_KEY_PATH,\n            payload: { keyPath: this.keyPath }\n        }, this.treedux);\n    }\n    createReadOnlyCopy() {\n        return ReadOnlyStateNode.create({ keyPath: this.keyPath }, this.treedux);\n    }\n    createProxy() {\n        return new Proxy(this, {\n            get(self, property) {\n                if (typeof property !== \"string\")\n                    return null;\n                const mutatorMethod = self.getMutatorMethod(property);\n                // If mutator method exists, return it\n                if (mutatorMethod)\n                    return mutatorMethod;\n                // If property is a default method, return it\n                if (typeof self[property] === \"function\")\n                    return self[property].bind(self);\n                // Default to returning a new StateNode\n                return StateNode.create({\n                    keyPath: self.keyPath.concat(property),\n                    mutators: self.mutators && self.mutators[property] ? self.mutators[property] : {}\n                }, self.treedux);\n            }\n        });\n    }\n    getMutatorMethod(methodName) {\n        // If mutator method doesn't exist, return null\n        if (!this.mutators || !this.mutators.hasOwnProperty(methodName) || typeof this.mutators[methodName] !== \"function\")\n            return null;\n        const mutatorCreator = this.mutators[methodName];\n        const mutator = mutatorCreator(this.treedux);\n        return mutator.getAction.bind(mutator);\n    }\n}\n","import { StateNode } from \"./StateNode\";\nexport class DataStore {\n    constructor(key, options) {\n        this.KEY = key;\n        this.initialState = options.initialState;\n        this.mutators = options.mutators;\n    }\n    static create(key, options) {\n        return new DataStore(key, options);\n    }\n    get state() {\n        const options = { keyPath: [this.KEY], mutators: this.mutators };\n        return StateNode.create(options, this.treedux);\n    }\n    setTreedux(treedux) {\n        this.treedux = treedux;\n        return this;\n    }\n    getInitialState() {\n        return this.initialState;\n    }\n    getReducers() {\n        return this.hydrateReducersFromMutators({}, this.mutators);\n    }\n    hydrateReducersFromMutators(reducerMap, mutators) {\n        for (const key in mutators) {\n            const mutatorCreator = mutators[key];\n            if (typeof mutatorCreator === \"object\") {\n                this.hydrateReducersFromMutators(reducerMap, mutatorCreator);\n            }\n            else {\n                const mutator = mutatorCreator(this.treedux);\n                if (reducerMap[mutator.getType()])\n                    throw `Cannot add reducer. Action type already registered: ${key}`;\n                reducerMap[mutator.getType()] = (...args) => {\n                    return mutator.reduce.call(mutator, ...args);\n                };\n            }\n        }\n        return reducerMap;\n    }\n}\n","export class AbstractMutator {\n    constructor(treedux) {\n        this.treedux = treedux;\n    }\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","require","DefaultActionEnum","Objects","static","keyPath","target","path","newObject","this","deepCopy","currentObj","length","shift","undefined","object","result","Array","isArray","Treedux","constructor","dataStores","options","reducerMap","dataStore","setTreedux","createReducer","getInitialState","builder","entries","getReducers","forEach","actionType","reducer","addCase","appReducer","combineReducers","rootReducer","state","action","type","BATCH","payload","reduce","SET_BY_KEY_PATH","setByKeyPath","DELETE_BY_KEY_PATH","storeInstance","configureStore","preloadedState","initialState","storeObj","getState","subscribe","listener","dispatch","actions","map","serialize","Action","treedux","ReadOnlyStateNode","createProxy","keys","isObject","lastKnownValue","callback","currentValue","newValue","JSON","stringify","byKey","create","concat","toString","Proxy","self","property","bind","StateNode","mutators","set","delete","createReadOnlyCopy","getMutatorMethod","methodName","mutator","mutatorCreator","getAction","DataStore","KEY","hydrateReducersFromMutators","getType","args","AbstractMutator"],"sourceRoot":""}