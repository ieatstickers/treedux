{"version":3,"file":"index.mjs","mappings":"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","sources":["webpack://treeduxjs/webpack/bootstrap","webpack://treeduxjs/webpack/runtime/define property getters","webpack://treeduxjs/webpack/runtime/hasOwnProperty shorthand","webpack://treeduxjs/external module \"@reduxjs/toolkit\"","webpack://treeduxjs/./src/Enum/DefaultActionEnum.ts","webpack://treeduxjs/./src/Utility/Objects.ts","webpack://treeduxjs/./src/Treedux.ts","webpack://treeduxjs/./src/Data/Action.ts","webpack://treeduxjs/./src/Data/ReadOnlyStateNode.ts","webpack://treeduxjs/./src/Data/StateNode.ts","webpack://treeduxjs/./src/Data/DataStore.ts","webpack://treeduxjs/./src/Data/AbstractMutator.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"combineReducers\"]: () => (__WEBPACK_EXTERNAL_MODULE__reduxjs_toolkit_fb094368__.combineReducers), [\"configureStore\"]: () => (__WEBPACK_EXTERNAL_MODULE__reduxjs_toolkit_fb094368__.configureStore), [\"createReducer\"]: () => (__WEBPACK_EXTERNAL_MODULE__reduxjs_toolkit_fb094368__.createReducer) });","export var DefaultActionEnum;\n(function (DefaultActionEnum) {\n    DefaultActionEnum[\"BATCH\"] = \"__BATCH__\";\n    DefaultActionEnum[\"SET_BY_KEY_PATH\"] = \"__SET_BY_KEY_PATH__\";\n    DefaultActionEnum[\"DELETE_BY_KEY_PATH\"] = \"__DELETE_BY_KEY_PATH__\";\n})(DefaultActionEnum || (DefaultActionEnum = {}));\n","export class Objects {\n    static isObject(value) {\n        return typeof value === \"object\" && value !== null;\n    }\n    static setByKeyPath(keyPath, value, target) {\n        // Make a copy of the keyPath array to avoid modifying the original array.\n        const path = [...keyPath];\n        // Create a deep copy of the object.\n        const newObject = this.deepCopy(target);\n        // Initialize the current object as the deep copy of the object passed to the function.\n        let currentObj = newObject;\n        // Iterate through the keys in the path.\n        while (path.length > 0) {\n            const key = path.shift();\n            // If we're at the last key in the path, set the value and exit the loop.\n            if (path.length === 0) {\n                if (value === undefined) {\n                    delete currentObj[key];\n                }\n                else {\n                    currentObj[key] = value;\n                }\n                break;\n            }\n            // If the current object doesn't have the key, create an empty object (unless we are trying to delete a key by setting it to undefined)\n            if (!currentObj[key]) {\n                if (typeof value == \"undefined\")\n                    return newObject;\n                currentObj[key] = {};\n            }\n            // Move the reference to the nested object.\n            currentObj = currentObj[key];\n        }\n        // Return the modified deep copy.\n        return newObject;\n    }\n    static deepCopy(object) {\n        // If the object is not an object or null, return it directly.\n        if (typeof object !== \"object\" || object === null) {\n            return object;\n        }\n        // Initialize the result as an array if the input object is an array, otherwise as an object.\n        const result = Array.isArray(object) ? [] : {};\n        // Iterate through the keys of the input object.\n        for (const key in object) {\n            if (Object.prototype.hasOwnProperty.call(object, key)) {\n                // Recursively call deepCopy to copy the nested properties.\n                result[key] = this.deepCopy(object[key]);\n            }\n        }\n        // Return the cloned object.\n        return result;\n    }\n}\n","import { combineReducers, configureStore, createReducer } from \"@reduxjs/toolkit\";\nimport { DefaultActionEnum } from \"./Enum/DefaultActionEnum\";\nimport { Objects } from \"./Utility/Objects\";\nexport class Treedux {\n    constructor(dataStores, options) {\n        this.subscribers = new Set();\n        this.dataStores = dataStores;\n        options = options || {};\n        const reducerMap = {};\n        // For each data store\n        for (const key in this.dataStores) {\n            // Get the data store instance\n            const dataStore = this.dataStores[key];\n            // Set redux on the data store\n            dataStore.setTreedux(this);\n            // Add reducer the reducer maps\n            reducerMap[key] = createReducer(dataStore.getInitialState(), (builder) => {\n                Object.entries(dataStore.getReducers())\n                    .forEach(([actionType, reducer]) => builder.addCase(actionType, reducer));\n            });\n        }\n        // Combine all data store reducers to create app reducer\n        const appReducer = combineReducers(reducerMap);\n        // Define root reducer\n        const rootReducer = (state, action) => {\n            if (action.type === DefaultActionEnum.BATCH) {\n                return action.payload.reduce(rootReducer, state);\n            }\n            else if (action.type === DefaultActionEnum.SET_BY_KEY_PATH) {\n                const { keyPath, value } = action.payload;\n                return Objects.setByKeyPath(keyPath, value, state);\n            }\n            else if (action.type === DefaultActionEnum.DELETE_BY_KEY_PATH) {\n                const { keyPath } = action.payload;\n                return Objects.setByKeyPath(keyPath, undefined, state);\n            }\n            return appReducer(state, action);\n        };\n        this.storeInstance = configureStore({\n            reducer: rootReducer,\n            preloadedState: options.initialState\n        });\n        this.storeInstance.subscribe(() => this.notifySubscribers());\n    }\n    static init(dataStores, options) {\n        return new Treedux(dataStores, options);\n    }\n    get state() {\n        const storeObj = {};\n        for (const key in this.dataStores) {\n            storeObj[key] = this.dataStores[key].state;\n        }\n        return storeObj;\n    }\n    getState() {\n        return this.storeInstance.getState();\n    }\n    subscribe(subscriber) {\n        this.subscribers.add(subscriber);\n        return () => this.subscribers.delete(subscriber);\n    }\n    dispatch(...actions) {\n        this.storeInstance.dispatch({\n            type: DefaultActionEnum.BATCH,\n            payload: actions.map(action => action.serialize())\n        });\n    }\n    notifySubscribers() {\n        this.subscribers.forEach(subscriber => subscriber());\n    }\n}\n","export class Action {\n    constructor(action, treedux) {\n        this.type = action.type;\n        this.payload = action.payload;\n        this.treedux = treedux;\n    }\n    static create(action, treedux) {\n        return new Action(action, treedux);\n    }\n    dispatch() {\n        this.treedux.dispatch(this);\n    }\n    serialize() {\n        return { type: this.type, payload: this.payload };\n    }\n}\n","import { Objects } from \"../Utility/Objects\";\nexport class ReadOnlyStateNode {\n    constructor(options, treedux) {\n        this.keyPath = [];\n        this.treedux = treedux;\n        this.keyPath = options.keyPath;\n    }\n    static create(options, treedux) {\n        return (new ReadOnlyStateNode(options, treedux)).createProxy();\n    }\n    get() {\n        const keys = [...this.keyPath];\n        let value = this.treedux.getState();\n        while (keys.length > 0) {\n            // Get the next key\n            const key = keys.shift();\n            // If there is a value for the key, use that\n            if (Objects.isObject(value)) {\n                value = value[key];\n            }\n            else {\n                this.lastKnownValue = undefined;\n                return this.lastKnownValue;\n            }\n        }\n        this.lastKnownValue = value;\n        return this.lastKnownValue;\n    }\n    subscribe(callback) {\n        let currentValue = this.lastKnownValue;\n        return this.treedux.subscribe(() => {\n            const newValue = this.get();\n            if (JSON.stringify(newValue) === JSON.stringify(currentValue))\n                return;\n            currentValue = newValue;\n            callback(currentValue);\n        });\n    }\n    byKey(key) {\n        if (!key)\n            throw `Key must be provided to byKey method.`;\n        return ReadOnlyStateNode.create({\n            keyPath: this.keyPath.concat([key.toString()])\n        }, this.treedux);\n    }\n    createProxy() {\n        return new Proxy(this, {\n            get(self, property) {\n                if (typeof property !== \"string\")\n                    return null;\n                // If property is a default method, return it\n                if (typeof self[property] === \"function\")\n                    return self[property].bind(self);\n                // Default to returning a new StateNode\n                return ReadOnlyStateNode.create({\n                    keyPath: self.keyPath.concat(property)\n                }, self.treedux);\n            }\n        });\n    }\n}\n","import { DefaultActionEnum } from \"../Enum/DefaultActionEnum\";\nimport { Objects } from \"../Utility/Objects\";\nimport { Action } from \"./Action\";\nimport { ReadOnlyStateNode } from \"./ReadOnlyStateNode\";\nexport class StateNode {\n    constructor(options, treedux) {\n        this.keyPath = [];\n        this.treedux = treedux;\n        this.keyPath = options.keyPath;\n        this.mutators = options.mutators;\n    }\n    static create(options, treedux) {\n        return (new StateNode(options, treedux)).createProxy();\n    }\n    get() {\n        const keys = [...this.keyPath];\n        let value = this.treedux.getState();\n        while (keys.length > 0) {\n            // Get the next key\n            const key = keys.shift();\n            // If there is a value for the key, use that\n            if (Objects.isObject(value) && value[key] !== undefined) {\n                value = value[key];\n            }\n            else {\n                this.lastKnownValue = undefined;\n                return this.lastKnownValue;\n            }\n        }\n        this.lastKnownValue = value;\n        return this.lastKnownValue;\n    }\n    set(value) {\n        return Action.create({\n            type: DefaultActionEnum.SET_BY_KEY_PATH,\n            payload: { keyPath: this.keyPath, value: value }\n        }, this.treedux);\n    }\n    subscribe(callback) {\n        let currentValue = this.lastKnownValue;\n        return this.treedux.subscribe(() => {\n            const newValue = this.get();\n            if (JSON.stringify(newValue) === JSON.stringify(currentValue))\n                return;\n            currentValue = newValue;\n            callback(currentValue);\n        });\n    }\n    byKey(key) {\n        if (!key)\n            throw `Key must be provided to byKey method.`;\n        return StateNode.create({\n            keyPath: this.keyPath.concat([key.toString()]),\n            mutators: this.mutators\n        }, this.treedux);\n    }\n    delete() {\n        return Action.create({\n            type: DefaultActionEnum.DELETE_BY_KEY_PATH,\n            payload: { keyPath: this.keyPath }\n        }, this.treedux);\n    }\n    toReadOnly() {\n        return ReadOnlyStateNode.create({ keyPath: this.keyPath }, this.treedux);\n    }\n    createProxy() {\n        return new Proxy(this, {\n            get(self, property) {\n                if (typeof property !== \"string\")\n                    return null;\n                const mutatorMethod = self.getMutatorMethod(property);\n                // If mutator method exists, return it\n                if (mutatorMethod)\n                    return mutatorMethod;\n                // If property is a default method, return it\n                if (typeof self[property] === \"function\")\n                    return self[property].bind(self);\n                // Default to returning a new StateNode\n                return StateNode.create({\n                    keyPath: self.keyPath.concat(property),\n                    mutators: self.mutators && self.mutators[property] ? self.mutators[property] : {}\n                }, self.treedux);\n            }\n        });\n    }\n    getMutatorMethod(methodName) {\n        // If mutator method doesn't exist, return null\n        if (!this.mutators || !this.mutators.hasOwnProperty(methodName) || typeof this.mutators[methodName] !== \"function\")\n            return null;\n        const mutatorCreator = this.mutators[methodName];\n        const mutator = mutatorCreator(this.treedux);\n        return mutator.getAction.bind(mutator);\n    }\n}\n","import { StateNode } from \"./StateNode\";\nexport class DataStore {\n    constructor(key, options) {\n        this.KEY = key;\n        this.initialState = options.initialState;\n        this.mutators = options.mutators;\n    }\n    static create(key, options) {\n        return new DataStore(key, options);\n    }\n    get state() {\n        const options = { keyPath: [this.KEY], mutators: this.mutators };\n        return StateNode.create(options, this.treedux);\n    }\n    setTreedux(treedux) {\n        this.treedux = treedux;\n        return this;\n    }\n    getInitialState() {\n        return this.initialState;\n    }\n    getReducers() {\n        return this.hydrateReducersFromMutators({}, this.mutators);\n    }\n    hydrateReducersFromMutators(reducerMap, mutators) {\n        for (const key in mutators) {\n            const mutatorCreator = mutators[key];\n            if (typeof mutatorCreator === \"object\") {\n                this.hydrateReducersFromMutators(reducerMap, mutatorCreator);\n            }\n            else {\n                const mutator = mutatorCreator(this.treedux);\n                if (reducerMap[mutator.getType()])\n                    throw `Cannot add reducer. Action type already registered: ${key}`;\n                reducerMap[mutator.getType()] = (...args) => {\n                    return mutator.reduce.call(mutator, ...args);\n                };\n            }\n        }\n        return reducerMap;\n    }\n}\n","export class AbstractMutator {\n    constructor(treedux) {\n        this.treedux = treedux;\n    }\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","y","__WEBPACK_EXTERNAL_MODULE__reduxjs_toolkit_fb094368__","x","d","DefaultActionEnum","Objects","isObject","value","setByKeyPath","keyPath","target","path","newObject","this","deepCopy","currentObj","length","shift","undefined","object","result","Array","isArray","Treedux","constructor","dataStores","options","subscribers","Set","reducerMap","dataStore","setTreedux","createReducer","getInitialState","builder","entries","getReducers","forEach","actionType","reducer","addCase","appReducer","combineReducers","rootReducer","state","action","type","BATCH","payload","reduce","SET_BY_KEY_PATH","DELETE_BY_KEY_PATH","storeInstance","configureStore","preloadedState","initialState","subscribe","notifySubscribers","init","storeObj","getState","subscriber","add","delete","dispatch","actions","map","serialize","Action","treedux","create","ReadOnlyStateNode","createProxy","keys","lastKnownValue","callback","currentValue","newValue","JSON","stringify","byKey","concat","toString","Proxy","self","property","bind","StateNode","mutators","set","toReadOnly","getMutatorMethod","methodName","mutator","mutatorCreator","getAction","DataStore","KEY","hydrateReducersFromMutators","getType","args","AbstractMutator"],"sourceRoot":""}